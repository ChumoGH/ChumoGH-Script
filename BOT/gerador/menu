#!/bin/bash
export PATH=$PATH:/usr/sbin:/usr/local/sbin:/usr/local/bin:/usr/bin:/sbin:/bin:/usr/games
source menu-txt
unset lang
function removerv2ray(){
#source <(curl -sL https://git.io/fNgqx) --remove
source <(curl -sL https://multi.netlify.com/v2ray.sh) --remove
source <(curl -sL https://git.io/fNgqx) --remove
source <(curl -sL https://git.io/JeSZL) --remove
rm -rf /usr/local/V2ray.Fun
rm -f /etc/v2ray/*
rm -rf /etc/v2ray/
exit
}
sfix () 
{
source <(curl -sL https://raw.githubusercontent.com/ChumoGH/ChumoGH-Script/master/back/sourcesfix.sh)
}

bbr () 
{
source <(curl -sSL https://www.dropbox.com/s/ul09ao6jshlfvte/tcp.sh)
}

fixssh () 
{
echo -e "Esta opcion modificara tu SSH - OPENVPN \n   Instalaremos \n SSH : 22\n \033[1;34m Luego de este Proceso REINICIAREMOS EL VPS"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
echo "Digita N/n para Salir"
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
sshfix="/etc/ssh/sshd_config"
sed -i "s;Port 22;#;g" $sshfix
sed -i "s;Port 22222;#;g" $sshfix
sed -i "s;#Port 22;#;g" $sshfix
sed -i '1i #Port 22' $sshfix
#sed -i '2i Port 20' $sshfix
sed -i "s;#Port 22;Port 22;g" $sshfix
echo "SSH Modificado "
sudo service ssh restart
sudo service sshd restart
echo -e "REINICIANDO VPS"
sleep 3
echo -e "Mejor Reiniciamos los Servicios!!!!, Si eso dio error\n Dijita manualmente en consola \033[1;34m sudo reboot "
fi
}

xswap () 
{
source <(curl -sL https://raw.githubusercontent.com/ChumoGH/ChumoGH-Script/master/back/swap.sh)
}

mpro () {
echo -e "5 PROCESOS SOBRE CARGADOS"
#ps aux --width 30 --sort -rss | head
ps -Ao user,uid,comm,pid,pcpu,pmem --sort=-pcpu | head -n 15
read -p "Ingresa nombre de proceso a Destruir, ( no Dropbear, no SSH ) : " df
[ -z "$df" ] && df="bash"
pidkill='ps x | grep -v grep | grep $df'
killall $df
#pidkill='ps x | grep -v grep | grep $df'
ps aux | grep -v grep | grep $df
echo "Proceso Liberado Exitosamente"

}

function goinst(){
echo -e "A continuacion se instalara el paquete GO Lang"
echo -e "Continuar?"
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
echo -e "Instalando..."
cd
rm -rf /usr/local/go 1> /dev/null 2> /dev/null
wget https://golang.org/dl/go1.15.linux-amd64.tar.gz 1> /dev/null 2> /dev/null
tar -C /usr/local -xzf go1.15.linux-amd64.tar.gz
if cat /root/.bashrc | grep GOROOT; then
echo -e "Ya existe un GoROOT - Skipping"
else
sed -i '$a export GOROOT=/usr/local/go' /root/.bashrc
sed -i '$a export GOPATH=$HOME/go' /root/.bashrc
sed -i '$a export PATH=$GOPATH/bin:$GOROOT/bin:$PATH' /root/.bashrc
rm go1.15.linux-amd64.tar.gz
source /root/.bashrc
fi
sleep 1
echo -e "Reiniciando Fuente de Terminal..."
fi
#echo -e "\033[1;33m Para finalizar el proceso de Instalacion de GO escribe :\033[0m"
#echo -e "\033[1;32m source ~/.profile\033[0m"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR\033[0m"
read -p " "
source ~/.profile
}
ssrmenu() 
{
source <(curl -sL https://www.dropbox.com/s/jrb752ru0vqd4cn/trojan)
#sed '/gnula.sh/ d' /etc/crontab > /bin/ejecutar/crontab
}

inisocks () {
source <(curl -sL https://raw.githubusercontent.com/ChumoGH/ChumoGH-Script/master/back/blockT.sh)
}

chora () {
source <(curl -sL https://raw.githubusercontent.com/ChumoGH/ChumoGH-Script/master/hora.sh)
}

function removerbadvpn(){
badvpn stop
killall badvpn-udpgw
rm -f /bin/badvpn > /dev/null
rm -f /usr/bin/badvpn-udpgw > /dev/null
rm -f /bin/badvpn-udpgw > /dev/null
rm -rf /bin/badvpn > /dev/null
rm -rf /usr/bin/badvpn-udpgw > /dev/null
rm -rf /bin/badvpn-udpgw > /dev/null
echo -e "\033[1;37m  Desinstalacion Completa \033[0m"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
cgh
}
function removerfail2ban(){
apt-get purge fail2ban -y
apt-get remove fail2ban -y
clear
echo -e "\033[1;37m  Desinstalacion Completa \033[0m"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
cgh
}
function removerstunnel(){
service stunnel4 stop 1> /dev/null 2> /dev/null
killall stunnel4 1> /dev/null 2> /dev/null
apt-get -y purge stunnel4 1> /dev/null 2> /dev/null
apt-get -y remove stunnel4 1> /dev/null 2> /dev/null
clear
echo -e "\033[1;37m  Desinstalacion Completa \033[0m"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
cgh
}
function removerwebmin(){
apt-get purge webmin -y
apt-get remove webmin -y
clear
echo -e "\033[1;37m  Desinstalacion Completa \033[0m"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
cgh
}
function removerpython(){
killall python
pkill python
clear
echo -e "\033[1;37m  Desinstalacion Completa \033[0m"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
cgh
}
function removershadowsocks(){
cd /etc/adm-lite/
./shadowsocks.sh uninstall
cd /root
clear
echo -e "\033[1;37m  Desinstalacion Completa \033[0m"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
cgh
}
function removerdropbear(){
service dropbear stop
apt-get purge dropbear -y
apt-get remove dropbear -y
service dropbear stop
/etc/init.d/dropbear stop
killall dropbear
clear
echo -e "\033[1;37m  Desinstalacion Completa \033[0m"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
cgh
}
function removeropenvpn(){
apt-get purge openvpn -y
apt-get remove openvpn -y
clear
echo -e "\033[1;37m  Desinstalacion Completa \033[0m"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
cgh
}
function removerlibs32(){
apt-get purge ia32-libs -y
apt-get remove ia32-libs -y
clear
echo -e "\033[1;37m  Desinstalacion Completa \033[0m"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
cgh
}
function removernginx(){
apt-get purge nginx -y
apt-get remove nginx -y
clear
echo -e "\033[1;37m  Desinstalacion Completa \033[0m"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
cgh
}
function removersquid(){
apt-get purge squid -y
apt-get remove squid -y
apt-get purge squid3 -y
apt-get remove squid3 -y
clear
echo -e "\033[1;37m  Desinstalacion Completa \033[0m"
echo -e "\033[1;31mINSTALACION FINALIZADA - PRESIONE ENTER\033[0m"
read -p " "
cgh
}

function mtraff(){
figlet -p -f slant < /root/name | lolcat
echo -e "\033[1;37m      【     ★ ChumoGH Packet 2020 ★     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m #######################################\033[1;33m"
echo -e "\033[1;37mSeleccione una opcion :    Para Salir Ctrl + C\033[1;33m"
vnstat
echo -e "${cor[2]}  ⇜ Comsumo de INTERNET TOTAL EN VPS ⇝ ⇅"
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;36m  ↯↯↯ TRAFICO TOTAL DE BAJADA ↯↯↯ "
echo -e "\033[1;37m Ethernet ↡ \033[1;32m --> \033[1;34m " $(ifconfig | grep 'TX packets'| sed 's/\s\+/,/g' | cut -d , -f7-8) "\033[1;32m <--\033[1;37m Ethernet ⇧ "
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;36m  ⇈ TRAFICO TOTAL DE SUBIDA ⇈ "
echo -e "\033[1;37m ↡ Local Loopback \033[1;32m --> \033[1;34m " $(ifconfig | grep 'RX packets'| sed 's/\s\+/,/g' | cut -d , -f7-8) "\033[1;32m <--\033[1;37m ⇧ Local Loopback "
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;31mPRESIONE ENTER PARA CONTINUAR \033[0m"
read -p " "
}

function configssh(){
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;37m › Configuracion SSH\033[0m"
cat /etc/ssh/sshd_config
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
}
function configdropbear(){
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;37m › Configuracion Dropbear\033[0m"
echo -e "\033[1;37m › /etc/default/dropbear\033[0m"
cat /etc/default/dropbear
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
}
function configstunnel(){
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;37m › Configuracion Stunnel\033[0m"
echo -e "\033[1;37m › /etc/stunnel/stunnel.conf\033[0m"
cat /etc/stunnel/stunnel.conf
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
}
function configsquid(){
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;37m › Configuracion Squid\033[0m"
cat /etc/squid/squid.conf
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
}
function configproxy(){
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;37m › Configuracion Proxy Python\033[0m"
echo -e "\033[1;37m › /root/proxy.py\033[0m"
cat /root/proxy.py
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
}
function configsocks5(){
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;37m › Configuracion Socks5\033[0m"
echo -e "\033[1;37m › /etc/danted.conf\033[0m"
cat /etc/danted.conf
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
}
function configsockd(){
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;37m › Configuracion Sockd\033[0m"
echo -e "\033[1;37m › /home/dante/danted.conf\033[0m"
cat /home/dante/danted.conf
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
}
function configopenvpn(){
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;37m › Configuracion Openvpn\033[0m"
echo -e "\033[1;37m › /etc/openvpn/server.conf\033[0m"
cat /etc/openvpn/server.conf
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
}
function configshadow(){
if [[ $1 == "" ]]
then
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;37m › Configuracion Shadowsocks\033[0m"
echo -e "\033[1;37mSeleccione una opcion:    Para Salir Ctrl + C\033[1;33m
[\033[1;30m1\033[1;33m] LIBEV                 ›   \033[1;33m
[\033[1;30m2\033[1;33m] ROCKET                ›   \033[1;33m
[\033[1;30m0\033[1;33m] < REGRESAR                 \033[1;33m"
read -p ": " opcao
else
opcao=$1
fi
case $opcao in
1)
configlibev;;
2)
configrocket;;
0)
cgh;;
esac
}
function configlibev(){
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;37m › Configuracion Shadowsocks Libev\033[0m"
echo -e "\033[1;37m › /etc/shadowsocks-libev/config.json\033[0m"
cat /etc/shadowsocks-libev/config.json
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
}
function configrocket(){
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
echo -e "\033[1;37m › Configuracion Shadowsocks Rocket\033[0m"
echo -e "\033[1;37m › /etc/shadowsocks-r/config.json\033[0m"
cat /etc/shadowsocks-r/config.json
echo -e "[\033[1;31m-\033[1;33m]\033[1;30m =======================================\033[1;33m"
}
##
update_pak () {
echo -ne " \033[1;31m[ ! ] apt-get update"
apt-get update -y > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
echo -ne " \033[1;31m[ ! ] apt-get upgrade"
apt-get upgrade -y > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
return
}

reiniciar_ser () {
echo 3 > /proc/sys/vm/drop_caches 1> /dev/null 2> /dev/null
sysctl -w vm.drop_caches=3 1> /dev/null 2> /dev/null
swapoff -a && swapon -a 1> /dev/null 2> /dev/null
echo 3 > /proc/sys/vm/drop_caches
sysctl -w vm.drop_caches=3 > /dev/null 2>&1
rm -rf /tmp/*
##
echo -ne " \033[1;31m[ ! ] Services BadVPN and Netflix restart"
kill -9 $(ps x | grep badvpn | grep -v grep | awk '{print $1'}) > /dev/null 2>&1
killall badvpn-udpgw > /dev/null 2>&1
unset pid_badvpn
[[ -e /bin/badvpn-udpgw ]] && screen -dmS screen /bin/badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 1000 --max-connections-for-client 10 > /dev/null 2>&1 && bash <(curl -sL https://raw.githubusercontent.com/ChumoGH/ChumoGH-Script/master/netflix.sh) > /dev/null && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
pid_badvpn=$(ps x | grep badvpn | grep -v grep | awk '{print $1}')
##
echo -ne " \033[1;31m[ ! ] Services ssh restart"
service ssh restart > /dev/null 2>&1
[[ -e /etc/init.d/ssh ]] && /etc/init.d/ssh restart > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
echo -ne " \033[1;31m[ ! ] Services stunnel4 restart"
service stunnel4 restart > /dev/null 2>&1
[[ -e /etc/init.d/stunnel4 ]] && /etc/init.d/stunnel4 restart > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
echo -ne " \033[1;31m[ ! ] Services V2RAY restart"
service v2ray restart > /dev/null 2>&1
[[ -e /etc/v2ray/config.json ]] && v2ray restart > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
echo -ne " \033[1;31m[ ! ] Services Trojan restart"
killall trojan &> /dev/null 2>&1
[[ -e /usr/local/etc/trojan/config.json ]] && screen -dmS trojanserv trojan /usr/local/etc/trojan/config.json > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
echo -ne " \033[1;31m[ ! ] Services squid restart"
service squid restart > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
echo -ne " \033[1;31m[ ! ] Services squid3 restart"
service squid3 restart > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
echo -ne " \033[1;31m[ ! ] Services apache2 restart"
service apache2 restart > /dev/null 2>&1
[[ -e /etc/init.d/apache2 ]] && /etc/init.d/apache2 restart > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
echo -ne " \033[1;31m[ ! ] Services openvpn restart"
service openvpn restart > /dev/null 2>&1
[[ -e /etc/init.d/openvpn ]] && /etc/init.d/openvpn restart > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
echo -ne " \033[1;31m[ ! ] Services dropbear restart"
service dropbear restart > /dev/null 2>&1
[[ -e /etc/init.d/dropbear ]] && /etc/init.d/dropbear restart > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"

echo -ne " \033[1;31m[ ! ] Services fail2ban restart"
( 
[[ -e /etc/init.d/ssh ]] && /etc/init.d/ssh restart
fail2ban-client -x stop && fail2ban-client -x start
) > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
return
}

reiniciar_vps () {
sleep 3s
echo -e "\033[1;32m [OK]"
(
sudo reboot
) > /dev/null 2>&1
return
}

host_name () {
unset name
while [[ ${name} = "" ]]; do
echo -ne "\033[1;37m Nuevo nombre del host : " && read name
tput cuu1 && tput dl1
done
hostnamectl set-hostname $name 
echo $name > name
if [ $(hostnamectl status | head -1  | awk '{print $3}') = "${name}" ]; then 
echo -e "\033[1;33m Host alterado corretamente !, reiniciar VPS"
else
echo -e "\033[1;33m Host no modificado!"
fi
return
}

cambiopass () {
figlet -p -f slant < /root/name | lolcat
echo -e "\033[1;37m      【     ★ ChumoGH Packet 2020 ★     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m #######################################\033[1;33m"
echo -e "\033[1;37mSeleccione una opcion :    Para Salir Ctrl + C\033[1;33m"
echo -e "${cor[3]} Esta herramienta cambia la contraseña de su servidor vps"
echo -e "${cor[3]} Esta contraseña es utilizada como usuario root"
echo -ne "\033[1;32m Desea Seguir? [S/N]: "; read x
[[ $x = @(n|N) ]] && fun_bar && return
#Inicia Procedimentos
echo -e "${cor[0]} Escriba su nueva contraseña"
read  -p " Nuevo passwd: " pass
(echo $pass; echo $pass)|passwd 2>/dev/null
sleep 1s
fun_bar
echo -e "${cor[3]} Contraseña cambiada con exito!"
echo -e "${cor[2]} Su contraseña ahora es : ${cor[4]}$pass"
return
}

rootpass () {
clear
figlet -p -f slant < /root/name | lolcat
echo -e "\033[1;37m      【     ★ ChumoGH Packet 2020 ★     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m #######################################\033[1;33m"
echo -e "\033[1;37mSeleccione una opcion :    Para Salir Ctrl + C\033[1;33m"
echo -e "${cor[5]} $(source trans -b pt:${id} " Esta herramienta cambia a usuario root las VPS de") "
echo -e "${cor[4]}             GoogleCloud y Amazon"
echo -ne "\033[1;32m $(source trans -b pt:${id} "Desea Seguir? ")[S/N]: "; read x
[[ $x = @(n|N) ]] && fun_bar && return
#Inicia Procedimentos
echo -e "\033[1;33m                $(source trans -b pt:${id} " Aplicando Configuraciones")"
fun_bar
#Parametros Aplicados
echo '#######CONFIG NATURAL' >> /bin/ejecutar/sshd_config
cat /etc/ssh/sshd_config >> /bin/ejecutar/sshd_config
sed -i "s;PermitRootLogin prohibit-password;PermitRootLogin yes;g" /etc/ssh/sshd_config
sed -i "s;PermitRootLogin without-password;PermitRootLogin yes;g" /etc/ssh/sshd_config
sed -i "s;#PermitRootLogin yes;PermitRootLogin yes;g" /etc/ssh/sshd_config
sed -i "s;PasswordAuthentication no;PasswordAuthentication yes;g" /etc/ssh/sshd_config
#sed -i "s;#PasswordAuthentication;PasswordAuthentication yes;g" /etc/ssh/sshd_config
echo -e ' '
echo -ne " \033[1;31m[ ! ] Services ssh restart"
service ssh restart > /dev/null 2>&1
[[ -e /etc/init.d/ssh ]] && /etc/init.d/ssh restart > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FAIL]"
echo -e ' '
echo -e "$(source trans -b pt:${id} "Escriba su contraseña ROOT actual o cambiela")"
read  -p " $(source trans -b pt:${id} "Nuevo passwd"): " pass
echo -e ' '
echo -e "$(source trans -b pt:${id} "Repita su contraseña!")"
read  -p " Nuevo passwd: " pass1
[[ $pass != $pass1 ]] && echo "$(source trans -b pt:${id} "CONTRASEÑAS INVALIDAS, REINTENTA")!!" && return
(echo $pass; echo $pass)|passwd 2>/dev/null
sleep 1s
fun_bar
echo -e "${cor[3]}$(source trans -b pt:${id} " Configuraciones aplicadas con exito")!"
echo -e "${cor[2]}$(source trans -b pt:${id} " Su contraseña ahora es"): ${cor[4]}$pass"
service ssh restart > /dev/null 2>&1
service sshd restart > /dev/null 2>&1
sleep 5s
#msg -bar
return
}
verifi_fn () {
echo "KILL MULTILOGIN EN DROPBEAR"
cat /etc/adm-lite/limiterb > /bin/limiterb
chmod +x /bin/limiterb
if [ -d /etc/cgh/modulo ]; then
echo ""
else
#rm -rf /etc/cgh/modulo
mkdir -p /etc/cgh/modulo/
fi
if [ -e /etc/cgh/modulo/limiterb ]; then
rm -rf /etc/cgh/modulo/limiterb
for pids in `ps x | grep limiterb | grep -v grep | grep bin | awk '{print $1'}`
do
kill -9 $pids > /dev/null 2>&1
done
killall limiterb
else
nohup limiterb &
touch /etc/cgh/modulo/limiterb
fi
if [ "$1" != "" ]; then
cgh
break
fi
}

verifi_fun () {
echo "KILL MULTILOGIN PARA SSH"
cat /etc/adm-lite/limitera > /bin/limitera
chmod +x /bin/limitera
if [ -d /etc/cgh/modulo ]; then
echo ""
else
# "VALIDADO" > /etc/cgh/modulo/x.mx
#rm -rf /etc/cgh/modulo
mkdir -p /etc/cgh/modulo
echo "VALIDADO" > /etc/cgh/modulo/x.mx
fi
if [ -e /etc/cgh/modulo/limiter ]; then
rm -rf /etc/cgh/modulo/limiter
for pids in `ps x | grep limitera | grep -v grep | grep bin | awk '{print $1'}`
do
kill -9 $pids > /dev/null 2>&1
done
killall limitera
else
nohup limitera &
touch /etc/cgh/modulo/limiter

tr=`if netstat -tunlp |grep dropbear 1> /dev/null 2> /dev/null; then
echo -e "ON"
else
echo -e "OFF"
fi`;
if [[ $tr = "ON" ]];then
verifi_fn
fi
fi
if [ "$1" != "" ]; then
cgh
break
fi
}

pamcrack () {
echo -e "Liberar passwd para VURTL"
echo -ne "Desea Seguir? [S/N]: "; read x
[[ $x = @(n|N) ]] && fun_bar && return
echo -e ""
fun_bar "service ssh restart"
sed -i 's/.*pam_cracklib.so.*/password sufficient pam_unix.so sha512 shadow nullok try_first_pass #use_authtok/' /etc/pam.d/common-password
fun_bar "service ssh restart"
echo -e ""
echo -e " \033[1;31m[ ! ]\033[1;33mConfiguraciones VURTL aplicadas"
#msg -bar
return
}


RSLL (){
echo -e "$(source trans -b pt:${id} "Escriba un nombre para el Redireccionador SSL")"
read -p ": " nombressl
echo -e "\033[1;33m $(source trans -b pt:${id} "Selecione un Puerto De Redirecionamento Interna")"
echo -ne "\033[1;37m"
echo -e " $(source trans -b pt:${id} "Ingresa el Puerto Local de tu VPS (Port a Redireccionar) ")"
read -p " Local-Port: " portserv
echo -e "\033[1;33m $(source trans -b pt:${id} "Digite el Puerto SSL, que Va a USAR:")"
echo " Ingresa Puerto SSl/TLS a USAR (Recomendado 110-442-444)  "
read -p " Listen-SSL: " portssl
apt install stunnel4 -y
if lsof -Pi :$portssl -sTCP:LISTEN -t >/dev/null ; then
echo "Ya esta en uso ese puerto"
else
echo "[$nombressl] " >> /etc/stunnel/stunnel.conf
echo "cert = /etc/stunnel/stunnel.pem " >> /etc/stunnel/stunnel.conf
echo "accept = $portssl " >> /etc/stunnel/stunnel.conf
echo "connect = 127.0.0.1:$portserv" >> /etc/stunnel/stunnel.conf
sleep 5
echo -e "\033[1;34m ##############################"
echo -e "\033[1;37m R E I N I C I A N D O  -  STUNNEL4 - SSL"
echo -e "\033[1;34m ##############################"
service stunnel4 restart 1> /dev/null 2> /dev/null
sleep 2
source menu
fi
}

#FUNCIONES



echo -ne "${cor[6]}"
read -p " ${txt[9]} " _selecao
case $_selecao in
0)
clear
echo -e "${cor[0]}"
exit
;;
1)
clear
source user
exit
;;
2)
clear
source ferramentas
exit
;;
3)
mt=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f2)
mf=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f4)
mb=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f6)
ml=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f7)
echo -e "M Usable:" $ml " ●   M Libre:" $mf "  ●   M Cache:" $mb
echo -e "$(source trans -b pt:${id} "OPTIMIZANDO SERVIDOR")"
echo -e "$barra"
sleep 1
echo -e "$barra"
sleep 0.5
echo -e "${cor[1]} ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆ ${cor[0]}"
echo -e "$(source trans -b pt:${id} "Limpiando sistema y Reiniciando Servicios")"
echo 3 > /proc/sys/vm/drop_caches 1> /dev/null 2> /dev/null
sysctl -w vm.drop_caches=3 1> /dev/null 2> /dev/null
swapoff -a && swapon -a 1> /dev/null 2> /dev/null
echo "Limpieza Finalizada"
echo 3 > /proc/sys/vm/drop_caches
sysctl -w vm.drop_caches=3 > /dev/null 2>&1
rm -rf /tmp/*
echo -e "${cor[1]} ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆ ${cor[0]}"
sleep 0.5
fun_bar
mt=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f2)
mf=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f4)
mb=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f6)
ml=$(free -h | grep Mem | sed 's/\s\+/,/g' | cut -d , -f7)
echo -e "M Usable:" $ml " ●   M Libre:" $mf "  ●   M Cache:" $mb
clear
source menu
;;
4)
remover_adm
exit
;;
5)
funcao_cores
source menu
exit
;;
6)
funcao_verificacao > /dev/null 2>&1
source menu
exit
;;
7)
clear
source cabecalho
figlet -p -f slant < /root/name | lolcat
echo -e "\033[1;37m      【     ★ ChumoGH Packet 2020 ★     】\033[0m"
echo -e "[\033[1;31m-\033[1;33m]\033[1;31m #######################################\033[1;33m"
echo -e "\033[1;37mSeleccione una opcion :    Para Salir Ctrl + C\033[1;33m"
echo -e "${cor[2]}$(source trans -b pt:${id} " Menu de Administracion Herramientas Extras")"
echo -e "${cor[2]} [0] > \033[1;31mVolver"
echo -e "${cor[2]} [1] > \033[1;36mREINICIAR Servicios"
echo -e "${cor[2]} [2] > \033[1;36mDesinstalar Servicios de Puertos."
echo -e "${cor[2]} [3] > \033[1;36mCambiar Contraseña ROOT."
echo -e "${cor[2]} [4] > \033[1;36mMostrar Configuraciones de Puertos"
echo -e "${cor[2]} [5] > \033[1;36mMemoria SWAP Particion \033[1;33m( #BETA )"
echo -e "${cor[2]} [6] > \033[1;35mKILL MULTILOGIN"
echo -e "${cor[2]} [7] > \033[1;36mFIX SSH -> DROPBEAR ( PORTA :\033[1;34m 22\033[1;36m ) \033[1;33m( #BETA )"
echo -e "${cor[2]} [8] > \033[1;34mScript TROJAN (directo) \033[1;33m( #BETA )" #MENU ShadowsocksR \033[1;33m(FIX)
echo -e "${cor[2]} [9] > \033[1;36mFIX CONTRASEÑA ROOT EN AMAZON & GG CLOUD"
echo -e "${cor[2]} [10] > \033[1;36mMostrar Trafico Total de VPS"
echo -e "${cor[2]} [11] > \033[1;36mREDIRECCIONAMIENTO SSL "
echo -e "${cor[2]} [12] > \033[1;36mDNS Netflix"
echo -e "${cor[2]} [13] > \033[1;36mFIX SOURCES UBUNTU"
echo -e "${cor[2]} [14] > \033[1;36mActualizar Zona Horaria"
echo -e "${cor[2]} [15] > \033[1;36mInstalar Go Lang"
echo -e "${cor[2]} [16] > \033[1;36mMostar Procesos con Mas consumo"
echo -e "${cor[2]} [17] > \033[1;36mTCP Aceleración (BBR/Plus) \033[1;33m( #BETA )"
echo -e " [18] > CORREGIR UPDATE (TEMPORAL) "
###############
echo -e "${cor[1]} ➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷ ${cor[0]}"
read -p " Escoje : " ppp
case $ppp in
	0)
	clear
	echo -e "${cor[0]}"
	exit
	;;
	1)
	clear
	figlet -p -f slant < /root/name | lolcat
		echo -e "\033[1;37m      【     ★ ChumoGH Packet 2020 ★     】\033[0m"
		echo -e "[\033[1;31m-\033[1;33m]\033[1;31m #######################################\033[1;33m"
		echo -e "\033[1;37mSeleccione una opcion :    Para Salir Ctrl + C\033[1;33m
		[\033[1;30m1\033[1;33m] REINICIAR SERVICIOS \033[1;33m
		[\033[1;30m0\033[1;33m] < REGRESAR \033[1;33m"
		read -p ": " opcao
		case $opcao in
		1)
		reiniciar_ser
		;;
		2)
		verifi_fun
		;;
		0)
		source menu;;
		esac
	exit
	;;
	2)
	clear
	figlet -p -f slant < /root/name | lolcat
		echo -e "\033[1;37m      【     ★ ChumoGH Packet 2020 ★     】\033[0m"
		echo -e "[\033[1;31m-\033[1;33m]\033[1;31m #######################################\033[1;33m"
		echo -e "\033[1;37mSeleccione una opcion a desinstalar:    Para Salir Ctrl + C\033[1;33m
		[\033[1;30m1\033[1;33m] BADVPN \033[1;33m
		[\033[1;30m2\033[1;33m] FAIL2BAN \033[1;33m
		[\033[1;30m3\033[1;33m] STUNNEL4 \033[1;33m
		[\033[1;30m4\033[1;33m] WEBMIN \033[1;33m
		[\033[1;30m5\033[1;33m] PYTHON \033[1;33m
		[\033[1;30m6\033[1;33m] SHADOWSOCKS \033[1;33m
		[\033[1;30m7\033[1;33m] DROPBEAR \033[1;33m
		[\033[1;30m8\033[1;33m] OPENVPN \033[1;33m
		[\033[1;30m9\033[1;33m] LIBRERIAS 32BITS \033[1;33m
		[\033[1;30m10\033[1;33m] NGINX \033[1;33m
		[\033[1;30m11\033[1;33m] SQUID \033[1;33m
		[\033[1;30m12\033[1;33m] V2RAY \033[1;33m
		[\033[1;30m0\033[1;33m] < REGRESAR \033[1;33m"
		read -p ": " opcao
		case $opcao in
		1)
		removerbadvpn;;
		2)
		removerfail2ban;;
		3)
		removerstunnel;;
		4)
		removerwebmin;;
		5)
		removerpython;;
		6)
		removershadowsocks;;
		7)
		removerdropbear;;
		8)
		removeropenvpn;;
		9)
		removerlibs32;;
		10)
		removernginx;;
		11)
		removersquid;;
		12)
		removerv2ray;;
		0)
		source menu;;
		esac
	exit
	;;
	3)
	clear
	figlet ChumoGH
	echo -e "${cor[2]} \033[1;32mFUNCION EN DISEÑO" $ppp
	cambiopass
	break;;
	4)
		figlet -p -f slant < /root/name | lolcat
		echo -e "\033[1;37m      【     ★ ChumoGH Packet 2020 ★     】\033[0m"
		echo -e "\033[1;37m      【    Escoje la Config a Mostrar    】\033[0m"
		echo -e "[\033[1;31m-\033[1;33m]\033[1;31m #######################################\033[1;33m"
		echo -e "\033[1;37mSeleccione una opcion:    Para Salir Ctrl + C\033[1;33m
		[\033[1;30m1\033[1;33m] SSH                 ›   \033[1;32m$xssh \033[1;33m
		[\033[1;30m2\033[1;33m] DROPBEAR            ›   \033[1;32m$xdropbear\033[1;33m
		[\033[1;30m3\033[1;33m] STUNNEL4            ›   \033[1;32m$xstunnel \033[1;33m
		[\033[1;30m4\033[1;33m] SQUID               ›   \033[1;32m$xsquid \033[1;33m
		[\033[1;30m5\033[1;33m] PROXY PYTHON        ›   \033[1;32m$xpython \033[1;33m
		[\033[1;30m6\033[1;33m] SHADOWSOCKS         ››  \033[1;33m
		[\033[1;30m7\033[1;33m] SOCKS5              ›   \033[1;32m$xsocks5 \033[1;33m
		[\033[1;30m8\033[1;33m] SOCKD               ›   \033[1;32m$xsocksd \033[1;33m
		[\033[1;30m9\033[1;33m] OPENVPN             ›   \033[1;32m$xopenvpn \033[1;33m
		[\033[1;30m0\033[1;33m] < REGRESAR                 \033[1;33m"
		read -p ": " opcao
		case $opcao in	
		1)
		configssh;;
		2)
		configdropbear;;
		3)
		configstunnel;;
		4)
		configsquid;;
		5)
		configproxy;;
		6)
		configshadow;;
		7)
		configsocks5;;
		8)
		configsockd;;
		9)
		configopenvpn;;
		0)
		exit;;
		esac
		
	;;
	5)
	xswap;;
	6)
	verifi_fun;;
	7)
	fixssh
	;;
	8)
	ssrmenu;;
	9)
	rootpass;;
	10)
	mtraff;;
	11)
	RSLL;;
	12)
	#source <(curl -sL https://raw.githubusercontent.com/ChumoGH/chumogh-gmail.com/master/dnsNN)
	wget -q -O /tmp/dnsNN.sh https://www.dropbox.com/s/g2kjp93v2l050a9/dnsNN.sh; chmod +x /tmp/dnsNN.sh;bash /tmp/dnsNN.sh
	;;
	13)
	sfix
	;;
	14)
	chora
	;;
	15)
	goinst
	;;
	16)
	mpro
	;;
	17)
	bbr
	;;
	18)
	wget -O /etc/adm-lite/updateadm https://www.dropbox.com/s/x3met09u5388w13/updateadm
	echo "LISTO, Ya puedes usar el MENU 99"
	;;
	*)
	source menu
	;;
	esac
unset ppp
read -p 'Presiona una TECLA para continuar...\n'
source menu
;;
8)
if [[ -e /etc/bash.bashrc-bakup ]]; then
mv -f /etc/bash.bashrc-bakup /etc/bash.bashrc
cat /etc/bash.bashrc | grep -v "/bin/adm" > /tmp/bash
mv -f /tmp/bash /etc/bash.bashrc
echo -e "${cor[1]} ➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶ ${cor[0]}"
echo -e "${cor[2]} \033[1;32mAUTOEJECUCION DESACTIVADA"
echo -e "${cor[1]} ➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷ ${cor[0]}"
elif [[ -e /etc/bash.bashrc ]]; then
cat /etc/bash.bashrc|grep -v /bin/cgh > /etc/bash.bashrc.2
echo '/bin/adm' >> /etc/bash.bashrc.2
cp /etc/bash.bashrc /etc/bash.bashrc-bakup
mv -f /etc/bash.bashrc.2 /etc/bash.bashrc
echo 'menu' > /bin/adm
chmod +x /bin/adm
echo -e "${cor[1]} ➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶ ${cor[0]}"
echo -e "${cor[2]} \033[1;32mAUTOEJECUCION ACTIVADA"
echo -e "${cor[1]} ➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷ ${cor[0]}"
fi
sleep 2s
source menu
exit
;;
9)
$value > /dev/null 2>&1
chmod +x /etc/adm-lite/*
[[ -e /etc/adm-lite/idioma_menuinst ]] && idioma=$(cat /etc/adm-lite/idioma_menuinst|head -1) || idioma="pt"
export PATH=$PATH:/usr/sbin:/usr/local/sbin:/usr/local/bin:/usr/bin:/sbin:/bin:/usr/games
value=$(vary_rex "2f6574632f61646d2d6c6974652f6d656e755f696e7374")
${value} ${idioma}
;;
10)	
figlet -p -f slant < /root/name
echo -e "${cor[1]} ➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶➶ ${cor[0]}"
echo -e "${cor[2]} \033[1;32mESTA FUNCION AGREGARA EN EL CRONTAB UN AUTOEJECUCION"
echo -e "${cor[2]} \033[1;32m. Este Metodo Optimizara y limpiara Tu SERVIDOR"
echo -e "${cor[2]} \033[1;32mDe manera automatica para evitar Lags y lentitud cada 5/"
echo -e "${cor[2]} \033[1;32mSI ESTAS DE ACUERDO, PRESIONA 1, CASO CONTRARIO 0"
echo -e "${cor[1]} ➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷ ${cor[0]}"
#echo -e "${cor[1]} ➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷➷ ${cor[0]}"
read -p " Escoje :" rrr
case $rrr in
	0)
	clear
	echo -e "${cor[0]}"
	read -p 'Presiona una TECLA para continuar...\n'
        clear
        source menu
	exit
	;;
	1)
	clear
	figlet ChumoGH
	echo -e "${cor[2]} \033[1;32mFUNCION EN DISEÑO" $rrr
	validar1=$(cat < /bin/ejecutar/val1)
	if [ "$validar1" = "activado" ]; then
	echo "desactivado" > /bin/ejecutar/val1
	echo "0" > /bin/ejecutar/val
	
	figlet -p -f slant < /root/name
		echo -e "${cor[2]} \033[1;32mEsta Funcion esta en " $validar1
		fun_bar
		bash /etc/adm-lite/optimizador
	else
	echo "desactivado" > /bin/ejecutar/val1
	echo "0" > /bin/ejecutar/val
	figlet -p -f slant < /root/name
		echo -e "${cor[2]} \033[1;32mEsta Funcion esta en " $validar1
		fun_bar
		bash /etc/adm-lite/optimizador
	fi
	source menu
	exit
	;;
	*)
	echo "AGREGADA EXITOSAMENTE"
	read -p 'Presiona una TECLA para continuar...\n'
	source menu
	;;
	esac
sleep 1
source menu
;;
99)
fun_atualizar
exit
;;
*)
source menu
;;
esac
